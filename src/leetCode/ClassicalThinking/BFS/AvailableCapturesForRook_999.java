package leetCode.ClassicalThinking.BFS;

import org.junit.Test;

/**
 * @author:choumei
 * @date:2020/3/26 11:06
 * @Description: 在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，
 * 白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。
 * 大写字符表示白棋，小写字符表示黑棋。
 *
 * 车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），
 * 然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。
 * 另外，车不能与其他友方（白色）象进入同一个方格。
 *
 * 返回车能够在一次移动中捕获到的卒的数量。
 *  
 *
 * 示例 1：
 *
 *
 *
 * 输入：[[".",".",".",".",".",".",".","."],
     * [".",".",".","p",".",".",".","."],
     * [".",".",".","R",".",".",".","p"],
     * [".",".",".",".",".",".",".","."],
     * [".",".",".",".",".",".",".","."],
     * [".",".",".","p",".",".",".","."],
     * [".",".",".",".",".",".",".","."],
     * [".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 在本例中，车能够捕获所有的卒。
 * 示例 2：
 *
 *
 *
 * 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：0
 * 解释：
 * 象阻止了车捕获任何卒。
 * 示例 3：
 *
 *
 *
 * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 车可以捕获位置 b5，d6 和 f5 的卒。
 *  
 *
 * 提示：
 *
 * board.length == board[i].length == 8
 * board[i][j] 可以是 'R'，'.'，'B' 或 'p'
 * 只有一个格子上存在 board[i][j] == 'R'
 *
 */
public class AvailableCapturesForRook_999 {

    public int numRookCaptures(char[][] board){
        if(null == board){
            return 0;
        }
        int rowLen = board.length;
        int colLen = board[0].length;

        int[][] dir = new int[][]{{-1,0},{1,0},{0,-1},{0,-1}};

        for(int i = 0; i < rowLen; i++){
            for(int j = 0; j < colLen; j++){
                if(board[i][j] == 'R'){
                    int res = 0;
                    for(int k = 0; k < 4; k++){
                        int x = i ;
                        int y = j ;
                        while(true){
                            x += dir[k][0];
                            y += dir[k][1];
                            if(x < 0 || x >= rowLen || y >= 0 || y >= colLen || board[x][y] == 'B'){
                                break;
                            }
                            if(board[x][y] == 'p'){
                                res++;
                                break;
                            }
                        }
                    }
                    return res;
                }
            }
        }
        return 0;
    }


    //==============================================自测===========================

    @Test
    public void test(){
        System.out.println(numRookCaptures2(
                new char[][]{{'.','.','.','.','.','.','.','.'},
                            {'.','.','.','p','.','.','.','.'},
                            {'.','.','.','.','.','.','.','.'},
                            {'.','p','B','R','.','.','p','.'},
                            {'.','.','.','.','.','.','.','.'},
                            {'.','.','.','.','.','.','.','.'},
                            {'.','.','.','.','.','.','.','.'},
                            {'.','.','.','.','.','.','.','.'}}));
    }
    /**
     * 获取白车能够捕获的敌方卒的个数
     *
     * @param board
     * @return
     */
    public int numRookCaptures2(char[][] board) {
        //特判
        if (null == board) {
            return 0;
        }

        //循环遍历找到白车，四个方向依次前进，捕获敌方卒
        int rowLen = board.length;
        int colLen = board.length;
        int[][] dir = new int[][]{{-1,0},{1,0},{0,-1},{0,1}};

        for (int i = 0; i < rowLen; i++) {
            for (int j = 0; j < colLen; j++) {

                //找到Rook
                if (board[i][j] == 'R') {
                    int res = 0;
                    for (int k = 0; k < 4; k++) {
                        int x = i;
                        int y = j;
                        while(true){        //注意：此处必须先加再判断再操作

                            //朝一个方向前进
                            x += dir[k][0];
                            y += dir[k][1];

                            if(x < 0 || x >= rowLen || y < 0 ||  y >= colLen || board[x][y] == 'B'){
                                break;
                            }

                            if(board[x][y] == 'p'){
                                res++;
                                break;
                            }
                        }
                    }
                    return res;
                }
            }
        }
        return 0;
    }
}
